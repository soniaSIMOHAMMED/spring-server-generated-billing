/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ErrorResponse;
import io.swagger.model.SubscriptionRequest;
import io.swagger.model.SubscriptionResponse;
import io.swagger.model.SubscriptionsResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-07-17T18:52:47.864Z[GMT]")
@Validated
public interface SubscriptionsApi {

    @Operation(summary = "Read Subscription", description = "Get an existing Subscription", security = {
        @SecurityRequirement(name = "ApiKey"),
@SecurityRequirement(name = "OAuth2", scopes = {
            "read",
"write",
"admin"        })    }, tags={ "PHASE 1", "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubscriptionResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "ERROR - Not authenticated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "ERROR - Access token does not have the required scope", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "ERROR - Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/subscriptions/{subscriptionRef}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SubscriptionResponse> getSubscription(@Parameter(in = ParameterIn.PATH, description = "External identifier of the subscription", required=true, schema=@Schema()) @PathVariable("subscriptionRef") String subscriptionRef);


    @Operation(summary = "Patch Subscription", description = "Update an existing Subscription", security = {
        @SecurityRequirement(name = "ApiKey"),
@SecurityRequirement(name = "OAuth2", scopes = {
            "read",
"write",
"admin"        })    }, tags={ "PHASE 1", "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubscriptionResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "ERROR - Invalid object request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "ERROR - Not authenticated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "ERROR - Access token does not have the required scope", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "ERROR - Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/subscriptions/{subscriptionRef}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<SubscriptionResponse> patchSubscription(@Parameter(in = ParameterIn.PATH, description = "External identifier of the subscription", required=true, schema=@Schema()) @PathVariable("subscriptionRef") String subscriptionRef, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SubscriptionRequest body);


    @Operation(summary = "Add Subscriptions", description = "Add a new Subscription", security = {
        @SecurityRequirement(name = "ApiKey"),
@SecurityRequirement(name = "OAuth2", scopes = {
            "read",
"write",
"admin"        })    }, tags={ "PHASE 1", "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "SUCCESS - Subscription created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubscriptionResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "ERROR - Invalid object request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "ERROR - Not authenticated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "ERROR - Access token does not have the required scope", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "ERROR - Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/subscriptions",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SubscriptionRequest> postSubscription(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SubscriptionRequest body) throws IOException;


    @Operation(summary = "Get Subscriptions", description = "Get all Subscriptions", security = {
            @SecurityRequirement(name = "ApiKey"),
            @SecurityRequirement(name = "OAuth2", scopes = {
                    "read",
                    "write",
                    "admin"        })    }, tags={ "PHASE 1", "Subscriptions" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "SUCCESS - Subscriptions Retreived", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubscriptionResponse.class))),

            @ApiResponse(responseCode = "400", description = "ERROR - Invalid object request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),

            @ApiResponse(responseCode = "401", description = "ERROR - Not authenticated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),

            @ApiResponse(responseCode = "403", description = "ERROR - Access token does not have the required scope", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),

            @ApiResponse(responseCode = "500", description = "ERROR - Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/allsubscriptions",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.GET)
    List<SubscriptionRequest> getSubscriptions();



    @Operation(summary = "Search Subscriptions", description = "Multi-criteria search for subscriptions. The result is a list (maybe empty) of subscriptions", security = {
        @SecurityRequirement(name = "ApiKey"),
@SecurityRequirement(name = "OAuth2", scopes = {
            "read",
"write",
"admin"        })    }, tags={ "PHASE 1", "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "SUCCESS - Returns a list of Subscriptions", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubscriptionsResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "ERROR - Not authenticated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "ERROR - Access token does not have the required scope", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "ERROR - Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/subscriptions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SubscriptionsResponse> searchSubscriptions(@Parameter(in = ParameterIn.QUERY, description = "External identifier of the deferred billing contract for the customer" ,schema=@Schema()) @Valid @RequestParam(value = "contractRef", required = false) String contractRef, @Parameter(in = ParameterIn.QUERY, description = "External identifier of the buyer" ,schema=@Schema()) @Valid @RequestParam(value = "customerRef", required = false) String customerRef, @Parameter(in = ParameterIn.QUERY, description = "Contract Status" ,schema=@Schema()) @Valid @RequestParam(value = "contractStatus", required = false) String contractStatus, @Parameter(in = ParameterIn.QUERY, description = "Limits the number of items on a page" ,schema=@Schema()) @Valid @RequestParam(value = "limit", required = false) Integer limit, @Parameter(in = ParameterIn.QUERY, description = "Specifies the page number of the list to be displayed" ,schema=@Schema()) @Valid @RequestParam(value = "offset", required = false) Integer offset);

}

